import requests
import time
import re

url = 'http://'
method = 'GET' # GET and POST usable

def get_content_length():
    resp = requests.get(url)
    if resp.status_code == 200:
        return resp.headers['content-length']
    return -1


def parse_param(param, value='dummy'):
    if method == 'GET':
        return '?{}={}'.format(param, value)
    elif method == 'POST':
        return {param : value}

    exit('Nope, GET or POST!')
    

def bf_params(path):
    param_file = open(path, 'r')
    main_length = get_content_length()
    skip = 'N'
    old_param = ''

    if main_length != -1:
        for line in param_file:
            line = line.rstrip()
            param = parse_param(line)

            while True:
                try:
                    if method == 'POST':
                        resp = requests.post(url, data=param)
                    elif method == 'GET':
                        resp = requests.get(url+param)
                    break
                except Exception as e:
                    print('[-] Exception while trying Parameter {}: {}'.format(params,e))
                    
                    if old_param != param:
                        skip = raw_input('[*] Skip this parametesr? (Y/N)>')
                        if skip == 'Y':
                            break
                        else:
                            old_param = param
                        
                    print('[*] Pausing for 10 seconds')
                    time.sleep(10)
                    continue

            if skip == 'Y':
                skip = 'N'
                continue

            if resp.headers['content-length'] != main_length:
                if resp.status_code == 200:
                    print('[+] Parameter found: {}'.format(param))
                else:
                    print('[*] response varies from usual responses. Got status code {} for parameter {}'.format(resp.status_code, param))
    else:
        print('check url, invalid content length for main page.')


if __name__ == "__main__":
    path = '../params.txt'
    bf_params(path)
    
