#!/bin/python3
# ldap3 client to query the windows ldap service
# Author: alwayslucky 

import ldap3
import traceback
import getopt
import sys
import json
import ssl


#TODO: implement dictionary for jsonkey and value parsing (currently only supports one key/value for modify  and add functions)

def usage():
    print()
    print("ldap3 client")
    print("-------------------------------------------------------------")
    print("Usage:")
    print("info     - get server information")
    print("cs       - change the search base for queries")
    print("context  - print the current search base for queries")
    print("elevate  - elevate the connection to an authorized connection")
    print("add      - add data")
    print("modify   - modify user data (elevated connection necessary)")
    print("whoami   - get current user information")
    print("query    - query the ldap3 service")
    print("exit     - i wont say what it does")
    print("-------------------------------------------------------------")
    print()


def init(host, port, username, password, ssl_value):
    #tls = ldap3.Tls(validate=ssl.CERT_NONE, version=ssl.PROTOCOL_TLSv1_2)
    server = ldap3.Server(host, get_info = ldap3.ALL, port = port, use_ssl = ssl_value)
    print(server)

    if username != "":
        connection = elevate_connection(server = server, username = username, password = password)
    else:
        connection = ldap3.Connection(server)
        connection.bind()
    #print(server.info.supported_sasl_mechanisms)
    
    return connection, server


# set the naming context for search queries so you dont have to set it each time
# TODO: this probably can also be used for modify/add when no base is set only target
def set_defaultNamingContext(serverinfo):
    serverinfo = json.loads(serverinfo)
    serverinfo = serverinfo["raw"]
    namingcontext = str(serverinfo["defaultNamingContext"]).strip("[']")
    return namingcontext


# print the server info of the ldap connection
def print_serverinfo(server):
    print(server.info)


# return current user of the connection
def whoami(connection):
    return connection.extend.standard.who_am_i()


# elevate the connection to a authenticated one
# TODO: take care of more authentication options
def elevate_connection(server, username, password, old_connection = None):
    try:
        connection_ele = ldap3.Connection(server, user = username, password = password, authentication = ldap3.NTLM)
        
        if(connection_ele.bind()):
            print("current user: {}".format(whoami(connection_ele).split(':')[1]))
            if old_connection is not None: old_connection.unbind()
            return connection_ele
        else:
            print("Elevating connection failed, check credentials")
            return old_connection
    except:
        print("Elevating connection went wrong:")
        traceback.print_exc()
        connection = ldap3.Connection(server)
        return old_connection


# query the ldap for something
def query(connection, namingContext, objclass='*', scope='SUBTREE', attributes='*'):

    if objclass == '': objclass = '*'
    if scope == '': scope = 'SUBTREE'
    if attributes == '': attributes = '*'

    try:
        if connection.search(namingContext, search_filter='(&(objectClass={}))'.format(objclass), search_scope = scope, attributes = attributes):
            print(connection.entries)
        else:
            print("Search failed, do you have permissions?")
    except:
        print("Somenthing went wrong:")
        traceback.print_exc()


# add an entry to the target destination (to_add)
def add(connection, to_add, objClass, jsonKey, jsonValue):
    try:
        connection.add(to_add, attributes={'objectClass':[objClass], jsonKey: jsonValue})
        print("Result: {}".format(connection.result))
    except:
        print("Adding {}, with key {} and value {} failed".format(to_add,jsonKey,jsonValue))
        traceback.print_exc()


# modfiy an entry of the target destionation (to_modify)
def modify(connection, to_modify, jsonKey, jsonValue):
    try:
        print(to_modify)
        connection.modify(to_modify, {jsonKey: [(ldap3.MODIFY_REPLACE, [jsonValue])]})
        print("Result: {}".format(connection.result))
    except:
        print("Modifying {} went wrong. Is your connection elevated?".format(jsonKey))
        traceback.print_exc()


# main loop, interactive shell
def main(host, port, username, password, ssl_value):
    connection,server = init(host, port, username, password, ssl_value)

    defaultNamingContext = set_defaultNamingContext(server.info.to_json())
    searchBase = defaultNamingContext
    user = whoami(connection)
    usage()
    print("Connected to {} with naming context {} as user {}.".format(host, defaultNamingContext, user))

    while True:
        line = input("> ").strip()
        
        if line == "q" or line == "exit" or line == "quit":
            break
        elif line == "usage" or line == "help":
            usage()
        elif line == "info":
            print_serverinfo(server)
        elif line == "cs":
            print("Changing the search base.")
            print("Current: {}".format(searchBase))
            searchBase = input("New naming context: ")
        elif line == "context":
            print(searchBase)
        elif line == "add":
            to_add = input('Object (CN=,OU=,DC= etc.): ')
            objClass = input('ObjectClass: ')
            jsonKey = input("Key: ")
            jsonValue = input("Value: ")
            add(connection, to_add, objClass, jsonKey, jsonValue)
        elif line == "elevate":
            user = input('username (DOMAIN\\USERNAME): ')
            password = input('password: ')
            connection = elevate_connection(server, user, password, connection)
            user = whoami(connection)
        elif line == "modify":
            to_modify = input('Object (CN=,OU=,DC= etc.): ')
            jsonKey = input("Key: ")
            jsonValue = input("Value: ")
            modify(connection, to_modify, jsonKey, jsonValue)
        elif line == "whoami":
            print(whoami(connection))
        elif line == "query":
            new_searchbase = input("Base (Default: {}): ".format(searchBase))
            objclass = input("ObjectClass (Default: *): ")
            scope = input("Scope (Default: SUBTREE): ")
            attributes = input("Attributes (Default: *): ")

            if new_searchbase.strip() != "":
                query(connection, new_searchbase, objclass, scope, attributes)
            else:
                query(connection, searchBase, objclass, scope, attributes)
        else:
            print("unrecognized option: "+line)
            usage()


if __name__ == "__main__":
    optlist, args = getopt.getopt(sys.argv[1:], 'h:P:u:p:', ["ssl"])
    ssl_value = False
    username = ""
    password = ""

    for o, a in optlist:
        if o == "-h":
            host = str(a)
        elif o == "-P":
            if a == "":
                port = 389
                continue
            if a == 636 or a == 3269:
                ssl_value = True
            port = int(a)
        elif o == "--ssl":
            ssl_value = True
        elif o == "-u":
            username = a.strip()
        elif o == "-p":
            password = a.strip()
            
        else:
            assert False, "unhandled option"
    
    main(host, port, username, password, ssl_value)


